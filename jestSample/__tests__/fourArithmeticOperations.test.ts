/* eslint-disable @typescript-eslint/explicit-function-return-type */
import { multiply } from "../fourArithmeticOperations/script";

// TODO
// [] multiply 3 10 3 // 90を返す
    // [] かけ算の場合、計算結果が1000を越える場合は「big big number」と文字列が返る
    // [] 1個〜30個までの引数を受け取る
        // 0個の引数を指定するとエラーが発生する
        // 1個の引数を指定する場合は正常に計算が行われる
        // 30個の引数を指定する場合は正常に計算が行われる
        // 31個の引数を指定するとエラーが発生する
    // [] 引数が数字以外だとエラーが発生する
        // 文字列を指定するとエラーが発生する
        // 真偽値を指定するとエラーが発生する
        // 配列を指定するとエラーが発生する
        // オブジェクトを指定するとエラーが発生する
        // nullを指定するとエラーが発生する
        // undefinedを指定するとエラーが発生する

// [] add 3 10 3 // 16を返す
    // [] 足し算の場合、計算結果が1000を超える場合は合計ではなく「too big」と文字列が返る
    // [] 1個〜30個までの引数を受け取る
        // 0個の引数を指定するとエラーが発生する
        // 1個の引数を指定する場合は正常に計算が行われる
        // 30個の引数を指定する場合は正常に計算が行われる
        // 31個の引数を指定するとエラーが発生する
    // [] 引数が数字以外だとエラーが発生する
        // 文字列を指定するとエラーが発生する
        // 真偽値を指定するとエラーが発生する
        // 配列を指定するとエラーが発生する
        // オブジェクトを指定するとエラーが発生する
        // nullを指定するとエラーが発生する
        // undefinedを指定するとエラーが発生する

// [] subtract 3 10 3 // -10を返す
    // [] 引き算の場合、計算結果がマイナスの場合は「negative number」と文字列が返る
    // [] 1個〜30個までの引数を受け取る
        // 0個の引数を指定するとエラーが発生する
        // 1個の引数を指定する場合は正常に計算が行われる
        // 30個の引数を指定する場合は正常に計算が行われる
        // 31個の引数を指定するとエラーが発生する
    // [] 引数が数字以外だとエラーが発生する
        // 文字列を指定するとエラーが発生する
        // 真偽値を指定するとエラーが発生する
        // 配列を指定するとエラーが発生する
        // オブジェクトを指定するとエラーが発生する
        // nullを指定するとエラーが発生する
        // undefinedを指定するとエラーが発生する

// [] divide 100 10 // 10を返す
    // [] 割り算の場合、計算結果を小数点何桁まで考慮するかは特に指定がありません。お任せします！
    // [] 1個〜30個までの引数を受け取る
        // 0個の引数を指定するとエラーが発生する
        // 1個の引数を指定する場合は正常に計算が行われる
        // 30個の引数を指定する場合は正常に計算が行われる
        // 31個の引数を指定するとエラーが発生する
    // [] 引数が数字以外だとエラーが発生する
        // 文字列を指定するとエラーが発生する
        // 真偽値を指定するとエラーが発生する
        // 配列を指定するとエラーが発生する
        // オブジェクトを指定するとエラーが発生する
        // nullを指定するとエラーが発生する
        // undefinedを指定するとエラーが発生する

describe("multiply", () => {
  test("引数に2つの数値を受け取り、計算を行い、その値を返す", () => {
    multiply(1, 2);
    expect(multiply(1, 2)).toBe(2);
  });
});
